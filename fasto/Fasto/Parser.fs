// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )


# 26 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LCURLY of (Position)
  | RCURLY of (Position)
  | EOF of (Position)
  | AND of (Position)
  | OR of (Position)
  | COMMA of (Position)
  | SEMICOLON of (Position)
  | EQ of (Position)
  | ARROW of (Position)
  | LPAR of (Position)
  | RPAR of (Position)
  | LBRACKET of (Position)
  | RBRACKET of (Position)
  | MINUS of (Position)
  | PLUS of (Position)
  | DEQ of (Position)
  | LTH of (Position)
  | TIMES of (Position)
  | DIVIDE of (Position)
  | IOTA of (Position)
  | LENGTH of (Position)
  | MAP of (Position)
  | READ of (Position)
  | REDUCE of (Position)
  | WRITE of (Position)
  | BOOL of (Position)
  | CHAR of (Position)
  | ELSE of (Position)
  | FN of (Position)
  | FUN of (Position)
  | IF of (Position)
  | IN of (Position)
  | INT of (Position)
  | LET of (Position)
  | THEN of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | CHARLIT of (char * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_DEQ
    | TOKEN_LTH
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_IOTA
    | TOKEN_LENGTH
    | TOKEN_MAP
    | TOKEN_READ
    | TOKEN_REDUCE
    | TOKEN_WRITE
    | TOKEN_BOOL
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_INT
    | TOKEN_LET
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_CHARLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_FunDecs
    | NONTERM_Fun
    | NONTERM_Type
    | NONTERM_Params
    | NONTERM_Exp
    | NONTERM_Exps
    | NONTERM_FunArg

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LCURLY _ -> 0 
  | RCURLY _ -> 1 
  | EOF _ -> 2 
  | AND _ -> 3 
  | OR _ -> 4 
  | COMMA _ -> 5 
  | SEMICOLON _ -> 6 
  | EQ _ -> 7 
  | ARROW _ -> 8 
  | LPAR _ -> 9 
  | RPAR _ -> 10 
  | LBRACKET _ -> 11 
  | RBRACKET _ -> 12 
  | MINUS _ -> 13 
  | PLUS _ -> 14 
  | DEQ _ -> 15 
  | LTH _ -> 16 
  | TIMES _ -> 17 
  | DIVIDE _ -> 18 
  | IOTA _ -> 19 
  | LENGTH _ -> 20 
  | MAP _ -> 21 
  | READ _ -> 22 
  | REDUCE _ -> 23 
  | WRITE _ -> 24 
  | BOOL _ -> 25 
  | CHAR _ -> 26 
  | ELSE _ -> 27 
  | FN _ -> 28 
  | FUN _ -> 29 
  | IF _ -> 30 
  | IN _ -> 31 
  | INT _ -> 32 
  | LET _ -> 33 
  | THEN _ -> 34 
  | TRUE _ -> 35 
  | FALSE _ -> 36 
  | ID _ -> 37 
  | STRINGLIT _ -> 38 
  | CHARLIT _ -> 39 
  | NUM _ -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LCURLY 
  | 1 -> TOKEN_RCURLY 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_COMMA 
  | 6 -> TOKEN_SEMICOLON 
  | 7 -> TOKEN_EQ 
  | 8 -> TOKEN_ARROW 
  | 9 -> TOKEN_LPAR 
  | 10 -> TOKEN_RPAR 
  | 11 -> TOKEN_LBRACKET 
  | 12 -> TOKEN_RBRACKET 
  | 13 -> TOKEN_MINUS 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_DEQ 
  | 16 -> TOKEN_LTH 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIVIDE 
  | 19 -> TOKEN_IOTA 
  | 20 -> TOKEN_LENGTH 
  | 21 -> TOKEN_MAP 
  | 22 -> TOKEN_READ 
  | 23 -> TOKEN_REDUCE 
  | 24 -> TOKEN_WRITE 
  | 25 -> TOKEN_BOOL 
  | 26 -> TOKEN_CHAR 
  | 27 -> TOKEN_ELSE 
  | 28 -> TOKEN_FN 
  | 29 -> TOKEN_FUN 
  | 30 -> TOKEN_IF 
  | 31 -> TOKEN_IN 
  | 32 -> TOKEN_INT 
  | 33 -> TOKEN_LET 
  | 34 -> TOKEN_THEN 
  | 35 -> TOKEN_TRUE 
  | 36 -> TOKEN_FALSE 
  | 37 -> TOKEN_ID 
  | 38 -> TOKEN_STRINGLIT 
  | 39 -> TOKEN_CHARLIT 
  | 40 -> TOKEN_NUM 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_FunDecs 
    | 3 -> NONTERM_FunDecs 
    | 4 -> NONTERM_Fun 
    | 5 -> NONTERM_Fun 
    | 6 -> NONTERM_Type 
    | 7 -> NONTERM_Type 
    | 8 -> NONTERM_Type 
    | 9 -> NONTERM_Type 
    | 10 -> NONTERM_Params 
    | 11 -> NONTERM_Params 
    | 12 -> NONTERM_Exp 
    | 13 -> NONTERM_Exp 
    | 14 -> NONTERM_Exp 
    | 15 -> NONTERM_Exp 
    | 16 -> NONTERM_Exp 
    | 17 -> NONTERM_Exp 
    | 18 -> NONTERM_Exp 
    | 19 -> NONTERM_Exp 
    | 20 -> NONTERM_Exp 
    | 21 -> NONTERM_Exp 
    | 22 -> NONTERM_Exp 
    | 23 -> NONTERM_Exp 
    | 24 -> NONTERM_Exp 
    | 25 -> NONTERM_Exp 
    | 26 -> NONTERM_Exp 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_Exp 
    | 35 -> NONTERM_Exp 
    | 36 -> NONTERM_Exp 
    | 37 -> NONTERM_Exp 
    | 38 -> NONTERM_Exps 
    | 39 -> NONTERM_Exps 
    | 40 -> NONTERM_FunArg 
    | 41 -> NONTERM_FunArg 
    | 42 -> NONTERM_FunArg 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LCURLY _ -> "LCURLY" 
  | RCURLY _ -> "RCURLY" 
  | EOF _ -> "EOF" 
  | AND _ -> "AND" 
  | OR _ -> "OR" 
  | COMMA _ -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | EQ _ -> "EQ" 
  | ARROW _ -> "ARROW" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | LBRACKET _ -> "LBRACKET" 
  | RBRACKET _ -> "RBRACKET" 
  | MINUS _ -> "MINUS" 
  | PLUS _ -> "PLUS" 
  | DEQ _ -> "DEQ" 
  | LTH _ -> "LTH" 
  | TIMES _ -> "TIMES" 
  | DIVIDE _ -> "DIVIDE" 
  | IOTA _ -> "IOTA" 
  | LENGTH _ -> "LENGTH" 
  | MAP _ -> "MAP" 
  | READ _ -> "READ" 
  | REDUCE _ -> "REDUCE" 
  | WRITE _ -> "WRITE" 
  | BOOL _ -> "BOOL" 
  | CHAR _ -> "CHAR" 
  | ELSE _ -> "ELSE" 
  | FN _ -> "FN" 
  | FUN _ -> "FUN" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | INT _ -> "INT" 
  | LET _ -> "LET" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | CHARLIT _ -> "CHARLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIVIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IOTA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LENGTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | READ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REDUCE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRITE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;1us;65535us;4us;5us;7us;65535us;4us;7us;9us;23us;20us;21us;25us;23us;75us;76us;106us;107us;108us;23us;3us;65535us;9us;10us;25us;26us;108us;111us;27us;65535us;12us;13us;15us;16us;33us;56us;59us;36us;60us;37us;61us;38us;62us;39us;63us;40us;64us;41us;65us;42us;66us;43us;67us;44us;68us;45us;69us;46us;70us;56us;79us;47us;82us;48us;87us;49us;92us;50us;93us;51us;95us;52us;99us;53us;100us;54us;101us;55us;103us;56us;110us;57us;113us;58us;3us;65535us;33us;34us;70us;71us;103us;104us;2us;65535us;85us;86us;90us;91us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;8us;16us;20us;48us;52us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;2us;4us;5us;2us;4us;5us;2us;4us;5us;1us;4us;1us;4us;1us;4us;9us;4us;19us;20us;21us;22us;23us;24us;25us;26us;1us;5us;1us;5us;9us;5us;19us;20us;21us;22us;23us;24us;25us;26us;1us;6us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;2us;10us;11us;1us;10us;1us;10us;1us;12us;1us;13us;1us;14us;1us;15us;4us;16us;28us;29us;37us;1us;17us;1us;18us;1us;18us;1us;18us;9us;19us;19us;20us;21us;22us;23us;24us;25us;26us;9us;19us;20us;20us;21us;22us;23us;24us;25us;26us;9us;19us;20us;21us;21us;22us;23us;24us;25us;26us;9us;19us;20us;21us;22us;22us;23us;24us;25us;26us;9us;19us;20us;21us;22us;23us;23us;24us;25us;26us;9us;19us;20us;21us;22us;23us;24us;24us;25us;26us;9us;19us;20us;21us;22us;23us;24us;25us;25us;26us;9us;19us;20us;21us;22us;23us;24us;25us;26us;26us;9us;19us;20us;21us;22us;23us;24us;25us;26us;27us;9us;19us;20us;21us;22us;23us;24us;25us;26us;27us;9us;19us;20us;21us;22us;23us;24us;25us;26us;27us;9us;19us;20us;21us;22us;23us;24us;25us;26us;31us;9us;19us;20us;21us;22us;23us;24us;25us;26us;32us;9us;19us;20us;21us;22us;23us;24us;25us;26us;33us;9us;19us;20us;21us;22us;23us;24us;25us;26us;34us;9us;19us;20us;21us;22us;23us;24us;25us;26us;34us;9us;19us;20us;21us;22us;23us;24us;25us;26us;35us;9us;19us;20us;21us;22us;23us;24us;25us;26us;36us;9us;19us;20us;21us;22us;23us;24us;25us;26us;36us;9us;19us;20us;21us;22us;23us;24us;25us;26us;37us;10us;19us;20us;21us;22us;23us;24us;25us;26us;38us;39us;9us;19us;20us;21us;22us;23us;24us;25us;26us;41us;9us;19us;20us;21us;22us;23us;24us;25us;26us;42us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;27us;1us;27us;2us;28us;29us;1us;28us;1us;28us;1us;29us;1us;30us;1us;30us;1us;30us;1us;30us;1us;31us;1us;31us;1us;31us;1us;32us;1us;32us;1us;32us;1us;33us;1us;33us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;38us;1us;38us;1us;40us;2us;41us;42us;2us;41us;42us;2us;41us;42us;1us;41us;1us;41us;1us;42us;1us;42us;1us;42us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;14us;16us;19us;22us;25us;27us;29us;31us;41us;43us;45us;55us;57us;59us;61us;63us;65us;67us;70us;73us;75us;77us;79us;81us;83us;85us;90us;92us;94us;96us;98us;108us;118us;128us;138us;148us;158us;168us;178us;188us;198us;208us;218us;228us;238us;248us;258us;268us;278us;288us;298us;309us;319us;329us;331us;333us;335us;337us;339us;341us;343us;345us;347us;349us;351us;354us;356us;358us;360us;362us;364us;366us;368us;370us;372us;374us;376us;378us;380us;382us;384us;386us;388us;390us;392us;394us;396us;398us;400us;402us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;424us;427us;430us;433us;435us;437us;439us;441us;|]
let _fsyacc_action_rows = 114
let _fsyacc_actionTableElements = [|1us;32768us;29us;4us;0us;49152us;1us;32768us;2us;3us;0us;16385us;4us;32768us;11us;20us;25us;19us;26us;18us;32us;17us;1us;16387us;29us;4us;0us;16386us;1us;32768us;37us;8us;1us;32768us;9us;9us;5us;32768us;10us;14us;11us;20us;25us;19us;26us;18us;32us;17us;1us;32768us;10us;11us;1us;32768us;7us;12us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;8us;16388us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;1us;32768us;7us;15us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;8us;16389us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;0us;16390us;0us;16391us;0us;16392us;4us;32768us;11us;20us;25us;19us;26us;18us;32us;17us;1us;32768us;12us;22us;0us;16393us;1us;32768us;37us;24us;1us;16395us;5us;25us;4us;32768us;11us;20us;25us;19us;26us;18us;32us;17us;0us;16394us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;2us;16400us;9us;70us;11us;101us;0us;16401us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;1us;32768us;1us;35us;0us;16402us;2us;16403us;17us;63us;18us;64us;6us;16404us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;7us;16405us;3us;60us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;2us;16406us;17us;63us;18us;64us;0us;16407us;0us;16408us;4us;16409us;13us;62us;14us;59us;17us;63us;18us;64us;4us;16410us;13us;62us;14us;59us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;34us;68us;9us;32768us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;27us;69us;8us;16411us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;10us;80us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;10us;83us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;10us;88us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;5us;93us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;10us;94us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;10us;96us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;31us;100us;8us;16420us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;32768us;3us;60us;4us;61us;12us;102us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;9us;16423us;3us;60us;4us;61us;5us;103us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;8us;16425us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;8us;16426us;3us;60us;4us;61us;13us;62us;14us;59us;15us;65us;16us;66us;17us;63us;18us;64us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;16us;32768us;0us;33us;9us;95us;10us;73us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;1us;32768us;10us;72us;0us;16412us;0us;16413us;1us;32768us;9us;75us;4us;32768us;11us;20us;25us;19us;26us;18us;32us;17us;1us;32768us;10us;77us;0us;16414us;1us;32768us;9us;79us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16415us;1us;32768us;9us;82us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16416us;1us;32768us;9us;85us;2us;32768us;28us;106us;37us;105us;1us;32768us;5us;87us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16417us;1us;32768us;9us;90us;2us;32768us;28us;106us;37us;105us;1us;32768us;5us;92us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16418us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16419us;1us;32768us;37us;98us;1us;32768us;7us;99us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16421us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;0us;16422us;0us;16424us;4us;32768us;11us;20us;25us;19us;26us;18us;32us;17us;1us;32768us;9us;108us;5us;32768us;10us;109us;11us;20us;25us;19us;26us;18us;32us;17us;1us;32768us;8us;110us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;1us;32768us;10us;112us;1us;32768us;8us;113us;15us;32768us;0us;33us;9us;95us;19us;81us;21us;84us;22us;74us;23us;89us;24us;78us;30us;67us;33us;97us;35us;28us;36us;29us;37us;31us;38us;32us;39us;30us;40us;27us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;11us;13us;14us;16us;18us;24us;26us;28us;44us;53us;55us;71us;80us;81us;82us;83us;88us;90us;91us;93us;95us;100us;101us;102us;103us;104us;105us;108us;109us;125us;127us;128us;131us;138us;146us;149us;150us;151us;156us;161us;171us;181us;190us;200us;210us;220us;230us;240us;250us;260us;269us;279us;289us;298us;307us;323us;339us;355us;371us;387us;403us;419us;435us;451us;467us;483us;500us;502us;503us;504us;506us;511us;513us;514us;516us;532us;533us;535us;551us;552us;554us;557us;559us;575us;576us;578us;581us;583us;599us;615us;616us;632us;633us;635us;637us;653us;669us;685us;686us;702us;703us;704us;709us;711us;717us;719us;735us;737us;739us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;2us;7us;6us;1us;1us;1us;3us;4us;2us;1us;1us;1us;1us;1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;6us;4us;3us;4us;4us;4us;6us;8us;3us;6us;4us;3us;1us;1us;6us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;7us;8us;8us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;65535us;16394us;16396us;16397us;16398us;16399us;65535us;16401us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16412us;16413us;65535us;65535us;65535us;16414us;65535us;65535us;16415us;65535us;65535us;16416us;65535us;65535us;65535us;65535us;16417us;65535us;65535us;65535us;65535us;65535us;16418us;65535us;16419us;65535us;65535us;65535us;65535us;65535us;16421us;65535us;16422us;16424us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 371 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedProg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 380 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedFunDec list in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsp"
                                               _1 
                   )
# 71 "Parser.fsp"
                 : AbSyn.UntypedProg));
# 392 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunDec list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsp"
                                                 _2 :: _3 
                   )
# 74 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 405 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsp"
                                                 _2 :: [] 
                   )
# 75 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 417 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsp"
                                  FunDec (fst _2, _1, _4, _7, snd _2) 
                   )
# 79 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 434 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsp"
                                  FunDec (fst _2, _1, [], _6, snd _2) 
                   )
# 81 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 450 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsp"
                                                       AbSyn.Int 
                   )
# 84 "Parser.fsp"
                 : AbSyn.Type));
# 461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsp"
                                                       AbSyn.Char 
                   )
# 85 "Parser.fsp"
                 : AbSyn.Type));
# 472 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsp"
                                                       AbSyn.Bool 
                   )
# 86 "Parser.fsp"
                 : AbSyn.Type));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsp"
                                                       AbSyn.Array _2 
                   )
# 87 "Parser.fsp"
                 : AbSyn.Type));
# 496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsp"
                                              Param (fst _2, _1) :: _4 
                   )
# 91 "Parser.fsp"
                 : 'gentype_Params));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsp"
                                              Param (fst _2, _1) :: [] 
                   )
# 92 "Parser.fsp"
                 : 'gentype_Params));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsp"
                                            Constant (IntVal (fst _1), snd _1) 
                   )
# 100 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 533 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsp"
                                            Constant (BoolVal (true), (_1)) 
                   )
# 101 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 544 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsp"
                                            Constant (BoolVal (false), (_1)) 
                   )
# 102 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> char * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsp"
                                            Constant (CharVal (fst _1), snd _1) 
                   )
# 103 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsp"
                                            Var _1 
                   )
# 104 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsp"
                                            StringLit _1 
                   )
# 105 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp list in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsp"
                                            ArrayLit (_2, (), _1) 
                   )
# 107 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsp"
                                            Plus (_1, _3, _2) 
                   )
# 108 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 614 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsp"
                                            And (_1, _3, _2) 
                   )
# 109 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 627 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsp"
                                            Or (_1, _3, _2) 
                   )
# 110 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 640 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsp"
                                            Minus(_1, _3, _2) 
                   )
# 111 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 653 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsp"
                                            Times(_1, _3, _2) 
                   )
# 112 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 666 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsp"
                                            Divide(_1, _3, _2) 
                   )
# 113 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 679 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsp"
                                            Equal(_1, _3, _2) 
                   )
# 114 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 692 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsp"
                                            Less (_1, _3, _2) 
                   )
# 115 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsp"
                                            If (_2, _4, _6, _1) 
                   )
# 117 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 721 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsp"
                                            Apply (fst _1, _3, snd _1) 
                   )
# 119 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 735 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsp"
                                            Apply (fst _1, [], snd _1) 
                   )
# 120 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.Type in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsp"
                                            Read (_3, _1) 
                   )
# 122 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 762 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsp"
                                            Write (_3, (), _1) 
                   )
# 124 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 776 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsp"
                                            Iota (_3, _1) 
                   )
# 126 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 790 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsp"
                                            Map (_3, _5, (), (), _1) 
                   )
# 128 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 806 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            let _8 = parseState.GetInput(8) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsp"
                                            Reduce (_3, _5, _7, (), _1) 
                   )
# 130 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 824 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsp"
                                            _2 
                   )
# 131 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 837 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsp"
                                            Let (Dec (fst _2, _4, _3), _6, _1) 
                   )
# 134 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 853 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsp"
                                            Index (fst _1, _3, (), _2) 
                   )
# 136 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 867 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsp"
                                             _1 :: _3 
                   )
# 139 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 880 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsp"
                                             _1 :: [] 
                   )
# 140 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 891 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsp"
                                      FunName (fst _1 ) 
                   )
# 143 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 902 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsp"
                                      Lambda (_2, [], _6, _1) 
                   )
# 145 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 918 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsp"
                                      Lambda (_2, _4, _7, _1) 
                   )
# 147 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
|]
# 936 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.UntypedProg =
    engine lexer lexbuf 0 :?> _
