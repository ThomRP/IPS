// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsp"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )
type UntypedExpFun = AbSyn.UntypedExp -> AbSyn.UntypedExp


# 27 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LCURLY of (Position)
  | RCURLY of (Position)
  | EOF of (Position)
  | AND of (Position)
  | OR of (Position)
  | NOT of (Position)
  | COMMA of (Position)
  | SEMICOLON of (Position)
  | EQ of (Position)
  | ARROW of (Position)
  | LPAR of (Position)
  | RPAR of (Position)
  | LBRACKET of (Position)
  | RBRACKET of (Position)
  | MINUS of (Position)
  | PLUS of (Position)
  | DEQ of (Position)
  | LTH of (Position)
  | TIMES of (Position)
  | DIVIDE of (Position)
  | IOTA of (Position)
  | LENGTH of (Position)
  | MAP of (Position)
  | READ of (Position)
  | REDUCE of (Position)
  | WRITE of (Position)
  | REPLICATE of (Position)
  | SCAN of (Position)
  | FILTER of (Position)
  | BOOL of (Position)
  | CHAR of (Position)
  | ELSE of (Position)
  | FN of (Position)
  | FUN of (Position)
  | IF of (Position)
  | IN of (Position)
  | INT of (Position)
  | LET of (Position)
  | THEN of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | NEGATE of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | CHARLIT of (char * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EOF
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_ARROW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_DEQ
    | TOKEN_LTH
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_IOTA
    | TOKEN_LENGTH
    | TOKEN_MAP
    | TOKEN_READ
    | TOKEN_REDUCE
    | TOKEN_WRITE
    | TOKEN_REPLICATE
    | TOKEN_SCAN
    | TOKEN_FILTER
    | TOKEN_BOOL
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_FN
    | TOKEN_FUN
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_INT
    | TOKEN_LET
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NEGATE
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_CHARLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_FunDecs
    | NONTERM_Fun
    | NONTERM_Type
    | NONTERM_Params
    | NONTERM_Exp
    | NONTERM_Exps
    | NONTERM_Decs
    | NONTERM_Dec
    | NONTERM_FunArg

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | LCURLY _ -> 0 
  | RCURLY _ -> 1 
  | EOF _ -> 2 
  | AND _ -> 3 
  | OR _ -> 4 
  | NOT _ -> 5 
  | COMMA _ -> 6 
  | SEMICOLON _ -> 7 
  | EQ _ -> 8 
  | ARROW _ -> 9 
  | LPAR _ -> 10 
  | RPAR _ -> 11 
  | LBRACKET _ -> 12 
  | RBRACKET _ -> 13 
  | MINUS _ -> 14 
  | PLUS _ -> 15 
  | DEQ _ -> 16 
  | LTH _ -> 17 
  | TIMES _ -> 18 
  | DIVIDE _ -> 19 
  | IOTA _ -> 20 
  | LENGTH _ -> 21 
  | MAP _ -> 22 
  | READ _ -> 23 
  | REDUCE _ -> 24 
  | WRITE _ -> 25 
  | REPLICATE _ -> 26 
  | SCAN _ -> 27 
  | FILTER _ -> 28 
  | BOOL _ -> 29 
  | CHAR _ -> 30 
  | ELSE _ -> 31 
  | FN _ -> 32 
  | FUN _ -> 33 
  | IF _ -> 34 
  | IN _ -> 35 
  | INT _ -> 36 
  | LET _ -> 37 
  | THEN _ -> 38 
  | TRUE _ -> 39 
  | FALSE _ -> 40 
  | NEGATE _ -> 41 
  | ID _ -> 42 
  | STRINGLIT _ -> 43 
  | CHARLIT _ -> 44 
  | NUM _ -> 45 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LCURLY 
  | 1 -> TOKEN_RCURLY 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_NOT 
  | 6 -> TOKEN_COMMA 
  | 7 -> TOKEN_SEMICOLON 
  | 8 -> TOKEN_EQ 
  | 9 -> TOKEN_ARROW 
  | 10 -> TOKEN_LPAR 
  | 11 -> TOKEN_RPAR 
  | 12 -> TOKEN_LBRACKET 
  | 13 -> TOKEN_RBRACKET 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_DEQ 
  | 17 -> TOKEN_LTH 
  | 18 -> TOKEN_TIMES 
  | 19 -> TOKEN_DIVIDE 
  | 20 -> TOKEN_IOTA 
  | 21 -> TOKEN_LENGTH 
  | 22 -> TOKEN_MAP 
  | 23 -> TOKEN_READ 
  | 24 -> TOKEN_REDUCE 
  | 25 -> TOKEN_WRITE 
  | 26 -> TOKEN_REPLICATE 
  | 27 -> TOKEN_SCAN 
  | 28 -> TOKEN_FILTER 
  | 29 -> TOKEN_BOOL 
  | 30 -> TOKEN_CHAR 
  | 31 -> TOKEN_ELSE 
  | 32 -> TOKEN_FN 
  | 33 -> TOKEN_FUN 
  | 34 -> TOKEN_IF 
  | 35 -> TOKEN_IN 
  | 36 -> TOKEN_INT 
  | 37 -> TOKEN_LET 
  | 38 -> TOKEN_THEN 
  | 39 -> TOKEN_TRUE 
  | 40 -> TOKEN_FALSE 
  | 41 -> TOKEN_NEGATE 
  | 42 -> TOKEN_ID 
  | 43 -> TOKEN_STRINGLIT 
  | 44 -> TOKEN_CHARLIT 
  | 45 -> TOKEN_NUM 
  | 48 -> TOKEN_end_of_input
  | 46 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_FunDecs 
    | 3 -> NONTERM_FunDecs 
    | 4 -> NONTERM_Fun 
    | 5 -> NONTERM_Fun 
    | 6 -> NONTERM_Type 
    | 7 -> NONTERM_Type 
    | 8 -> NONTERM_Type 
    | 9 -> NONTERM_Type 
    | 10 -> NONTERM_Params 
    | 11 -> NONTERM_Params 
    | 12 -> NONTERM_Exp 
    | 13 -> NONTERM_Exp 
    | 14 -> NONTERM_Exp 
    | 15 -> NONTERM_Exp 
    | 16 -> NONTERM_Exp 
    | 17 -> NONTERM_Exp 
    | 18 -> NONTERM_Exp 
    | 19 -> NONTERM_Exp 
    | 20 -> NONTERM_Exp 
    | 21 -> NONTERM_Exp 
    | 22 -> NONTERM_Exp 
    | 23 -> NONTERM_Exp 
    | 24 -> NONTERM_Exp 
    | 25 -> NONTERM_Exp 
    | 26 -> NONTERM_Exp 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | 32 -> NONTERM_Exp 
    | 33 -> NONTERM_Exp 
    | 34 -> NONTERM_Exp 
    | 35 -> NONTERM_Exp 
    | 36 -> NONTERM_Exp 
    | 37 -> NONTERM_Exp 
    | 38 -> NONTERM_Exp 
    | 39 -> NONTERM_Exp 
    | 40 -> NONTERM_Exp 
    | 41 -> NONTERM_Exp 
    | 42 -> NONTERM_Exp 
    | 43 -> NONTERM_Exps 
    | 44 -> NONTERM_Exps 
    | 45 -> NONTERM_Decs 
    | 46 -> NONTERM_Decs 
    | 47 -> NONTERM_Dec 
    | 48 -> NONTERM_FunArg 
    | 49 -> NONTERM_FunArg 
    | 50 -> NONTERM_FunArg 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 48 
let _fsyacc_tagOfErrorTerminal = 46

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LCURLY _ -> "LCURLY" 
  | RCURLY _ -> "RCURLY" 
  | EOF _ -> "EOF" 
  | AND _ -> "AND" 
  | OR _ -> "OR" 
  | NOT _ -> "NOT" 
  | COMMA _ -> "COMMA" 
  | SEMICOLON _ -> "SEMICOLON" 
  | EQ _ -> "EQ" 
  | ARROW _ -> "ARROW" 
  | LPAR _ -> "LPAR" 
  | RPAR _ -> "RPAR" 
  | LBRACKET _ -> "LBRACKET" 
  | RBRACKET _ -> "RBRACKET" 
  | MINUS _ -> "MINUS" 
  | PLUS _ -> "PLUS" 
  | DEQ _ -> "DEQ" 
  | LTH _ -> "LTH" 
  | TIMES _ -> "TIMES" 
  | DIVIDE _ -> "DIVIDE" 
  | IOTA _ -> "IOTA" 
  | LENGTH _ -> "LENGTH" 
  | MAP _ -> "MAP" 
  | READ _ -> "READ" 
  | REDUCE _ -> "REDUCE" 
  | WRITE _ -> "WRITE" 
  | REPLICATE _ -> "REPLICATE" 
  | SCAN _ -> "SCAN" 
  | FILTER _ -> "FILTER" 
  | BOOL _ -> "BOOL" 
  | CHAR _ -> "CHAR" 
  | ELSE _ -> "ELSE" 
  | FN _ -> "FN" 
  | FUN _ -> "FUN" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | INT _ -> "INT" 
  | LET _ -> "LET" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | NEGATE _ -> "NEGATE" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | CHARLIT _ -> "CHARLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RCURLY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SEMICOLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RPAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RBRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIVIDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IOTA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LENGTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | READ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REDUCE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRITE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REPLICATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SCAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FILTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEGATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;2us;5us;6us;1us;65535us;4us;5us;7us;65535us;4us;7us;9us;23us;20us;21us;25us;23us;84us;85us;134us;135us;136us;23us;3us;65535us;9us;10us;25us;26us;136us;139us;34us;65535us;12us;13us;15us;16us;33us;62us;66us;36us;67us;37us;68us;38us;69us;39us;70us;40us;71us;41us;72us;42us;73us;43us;74us;44us;75us;45us;76us;46us;77us;47us;78us;48us;79us;62us;88us;49us;91us;50us;96us;51us;101us;52us;102us;53us;104us;54us;108us;55us;110us;56us;111us;57us;116us;58us;117us;59us;122us;60us;124us;61us;126us;62us;132us;63us;138us;64us;141us;65us;3us;65535us;33us;34us;79us;80us;126us;127us;2us;65535us;106us;107us;129us;130us;2us;65535us;106us;128us;129us;128us;4us;65535us;94us;95us;99us;100us;114us;115us;120us;121us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;8us;16us;20us;55us;59us;62us;65us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;2us;3us;2us;2us;3us;1us;2us;2us;4us;5us;2us;4us;5us;2us;4us;5us;1us;4us;1us;4us;1us;4us;9us;4us;19us;20us;23us;24us;25us;26us;27us;28us;1us;5us;1us;5us;9us;5us;19us;20us;23us;24us;25us;26us;27us;28us;1us;6us;1us;7us;1us;8us;1us;9us;1us;9us;1us;9us;2us;10us;11us;2us;10us;11us;1us;10us;1us;10us;1us;12us;1us;13us;1us;14us;1us;15us;4us;16us;30us;31us;42us;1us;17us;1us;18us;1us;18us;1us;18us;9us;19us;19us;20us;23us;24us;25us;26us;27us;28us;9us;19us;20us;20us;23us;24us;25us;26us;27us;28us;9us;19us;20us;21us;23us;24us;25us;26us;27us;28us;9us;19us;20us;22us;23us;24us;25us;26us;27us;28us;9us;19us;20us;23us;23us;24us;25us;26us;27us;28us;9us;19us;20us;23us;24us;24us;25us;26us;27us;28us;9us;19us;20us;23us;24us;25us;25us;26us;27us;28us;9us;19us;20us;23us;24us;25us;26us;26us;27us;28us;9us;19us;20us;23us;24us;25us;26us;27us;27us;28us;9us;19us;20us;23us;24us;25us;26us;27us;28us;28us;9us;19us;20us;23us;24us;25us;26us;27us;28us;29us;9us;19us;20us;23us;24us;25us;26us;27us;28us;29us;9us;19us;20us;23us;24us;25us;26us;27us;28us;29us;9us;19us;20us;23us;24us;25us;26us;27us;28us;33us;9us;19us;20us;23us;24us;25us;26us;27us;28us;34us;9us;19us;20us;23us;24us;25us;26us;27us;28us;35us;9us;19us;20us;23us;24us;25us;26us;27us;28us;36us;9us;19us;20us;23us;24us;25us;26us;27us;28us;36us;9us;19us;20us;23us;24us;25us;26us;27us;28us;37us;9us;19us;20us;23us;24us;25us;26us;27us;28us;38us;9us;19us;20us;23us;24us;25us;26us;27us;28us;39us;9us;19us;20us;23us;24us;25us;26us;27us;28us;39us;9us;19us;20us;23us;24us;25us;26us;27us;28us;40us;9us;19us;20us;23us;24us;25us;26us;27us;28us;40us;9us;19us;20us;23us;24us;25us;26us;27us;28us;41us;9us;19us;20us;23us;24us;25us;26us;27us;28us;42us;10us;19us;20us;23us;24us;25us;26us;27us;28us;43us;44us;9us;19us;20us;23us;24us;25us;26us;27us;28us;47us;9us;19us;20us;23us;24us;25us;26us;27us;28us;49us;9us;19us;20us;23us;24us;25us;26us;27us;28us;50us;1us;19us;1us;20us;1us;21us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;29us;1us;29us;2us;30us;31us;1us;30us;1us;30us;1us;31us;1us;32us;1us;32us;1us;32us;1us;32us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;1us;35us;1us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;38us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;39us;1us;40us;1us;40us;1us;40us;1us;40us;1us;40us;1us;40us;1us;41us;1us;41us;1us;41us;1us;41us;1us;41us;1us;42us;1us;42us;1us;43us;1us;43us;2us;45us;46us;1us;45us;1us;45us;1us;47us;1us;47us;1us;48us;2us;49us;50us;2us;49us;50us;2us;49us;50us;1us;49us;1us;49us;1us;50us;1us;50us;1us;50us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;14us;16us;19us;22us;25us;27us;29us;31us;41us;43us;45us;55us;57us;59us;61us;63us;65us;67us;70us;73us;75us;77us;79us;81us;83us;85us;90us;92us;94us;96us;98us;108us;118us;128us;138us;148us;158us;168us;178us;188us;198us;208us;218us;228us;238us;248us;258us;268us;278us;288us;298us;308us;318us;328us;338us;348us;358us;369us;379us;389us;399us;401us;403us;405us;407us;409us;411us;413us;415us;417us;419us;421us;423us;425us;428us;430us;432us;434us;436us;438us;440us;442us;444us;446us;448us;450us;452us;454us;456us;458us;460us;462us;464us;466us;468us;470us;472us;474us;476us;478us;480us;482us;484us;486us;488us;490us;492us;494us;496us;498us;500us;502us;504us;506us;508us;510us;512us;514us;516us;518us;520us;522us;524us;527us;529us;531us;533us;535us;537us;540us;543us;546us;548us;550us;552us;554us;|]
let _fsyacc_action_rows = 142
let _fsyacc_actionTableElements = [|1us;32768us;33us;4us;0us;49152us;1us;32768us;2us;3us;0us;16385us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;16387us;33us;4us;0us;16386us;1us;32768us;42us;8us;1us;32768us;10us;9us;5us;32768us;11us;14us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;11us;11us;1us;32768us;8us;12us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;8us;16388us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;1us;32768us;8us;15us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;8us;16389us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;0us;16390us;0us;16391us;0us;16392us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;13us;22us;0us;16393us;1us;32768us;42us;24us;1us;16395us;6us;25us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;0us;16394us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;2us;16400us;10us;79us;12us;124us;0us;16401us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;1us;32768us;1us;35us;0us;16402us;2us;16403us;18us;72us;19us;73us;6us;16404us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;6us;16405us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;0us;16406us;7us;16407us;3us;67us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;2us;16408us;18us;72us;19us;73us;0us;16409us;0us;16410us;4us;16411us;14us;71us;15us;66us;18us;72us;19us;73us;4us;16412us;14us;71us;15us;66us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;38us;77us;9us;32768us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;31us;78us;8us;16413us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;89us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;92us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;97us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;6us;102us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;103us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;105us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;8us;16422us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;6us;111us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;112us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;6us;117us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;118us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;11us;123us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;32768us;3us;67us;4us;70us;13us;125us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;9us;16428us;3us;67us;4us;70us;6us;126us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;8us;16431us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;8us;16433us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;8us;16434us;3us;67us;4us;70us;14us;71us;15us;66us;16us;74us;17us;75us;18us;72us;19us;73us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;21us;32768us;0us;33us;5us;68us;10us;104us;11us;82us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;1us;32768us;11us;81us;0us;16414us;0us;16415us;1us;32768us;10us;84us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;11us;86us;0us;16416us;1us;32768us;10us;88us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16417us;1us;32768us;10us;91us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16418us;1us;32768us;10us;94us;2us;32768us;32us;134us;42us;133us;1us;32768us;6us;96us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16419us;1us;32768us;10us;99us;2us;32768us;32us;134us;42us;133us;1us;32768us;6us;101us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16420us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16421us;1us;32768us;42us;131us;1us;32768us;35us;108us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;1us;32768us;10us;110us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16423us;1us;32768us;10us;114us;2us;32768us;32us;134us;42us;133us;1us;32768us;6us;116us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16424us;1us;32768us;10us;120us;2us;32768us;32us;134us;42us;133us;1us;32768us;6us;122us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16425us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16426us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16427us;1us;16430us;7us;129us;1us;32768us;42us;131us;0us;16429us;1us;32768us;8us;132us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;0us;16432us;4us;32768us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;10us;136us;5us;32768us;11us;137us;12us;20us;29us;19us;30us;18us;36us;17us;1us;32768us;9us;138us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;1us;32768us;11us;140us;1us;32768us;9us;141us;20us;32768us;0us;33us;5us;68us;10us;104us;20us;90us;22us;93us;23us;83us;24us;98us;25us;87us;26us;109us;27us;113us;28us;119us;34us;76us;37us;106us;39us;28us;40us;29us;41us;69us;42us;31us;43us;32us;44us;30us;45us;27us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;5us;6us;11us;13us;14us;16us;18us;24us;26us;28us;49us;58us;60us;81us;90us;91us;92us;93us;98us;100us;101us;103us;105us;110us;111us;112us;113us;114us;115us;118us;119us;140us;142us;143us;146us;153us;160us;161us;169us;172us;173us;174us;179us;184us;194us;204us;213us;223us;233us;243us;253us;263us;273us;282us;292us;302us;312us;322us;332us;342us;352us;361us;370us;379us;400us;421us;442us;463us;484us;505us;526us;547us;568us;589us;610us;631us;652us;674us;676us;677us;678us;680us;685us;687us;688us;690us;711us;712us;714us;735us;736us;738us;741us;743us;764us;765us;767us;770us;772us;793us;814us;815us;836us;837us;839us;841us;862us;864us;885us;906us;907us;909us;912us;914us;935us;956us;957us;959us;962us;964us;985us;986us;1007us;1008us;1029us;1030us;1032us;1034us;1035us;1037us;1058us;1059us;1064us;1066us;1072us;1074us;1095us;1097us;1099us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;3us;2us;7us;6us;1us;1us;1us;3us;4us;2us;1us;1us;1us;1us;1us;1us;3us;3us;3us;2us;2us;3us;3us;3us;3us;3us;3us;6us;4us;3us;4us;4us;4us;6us;8us;3us;4us;6us;8us;6us;4us;3us;1us;3us;1us;3us;1us;6us;7us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;7us;8us;8us;9us;10us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16390us;16391us;16392us;65535us;65535us;16393us;65535us;65535us;65535us;16394us;16396us;16397us;16398us;16399us;65535us;16401us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16414us;16415us;65535us;65535us;65535us;16416us;65535us;65535us;16417us;65535us;65535us;16418us;65535us;65535us;65535us;65535us;16419us;65535us;65535us;65535us;65535us;65535us;16420us;65535us;16421us;65535us;65535us;65535us;65535us;65535us;65535us;16423us;65535us;65535us;65535us;65535us;65535us;16424us;65535us;65535us;65535us;65535us;16425us;65535us;16426us;65535us;16427us;65535us;65535us;16429us;65535us;65535us;16432us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;|]
let _fsyacc_reductions = lazy [|
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedProg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedFunDec list in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsp"
                                               _1 
                   )
# 57 "Parser.fsp"
                 : AbSyn.UntypedProg));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunDec list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsp"
                                                 _2 :: _3 
                   )
# 60 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedFunDec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsp"
                                                 _2 :: [] 
                   )
# 61 "Parser.fsp"
                 : AbSyn.UntypedFunDec list));
# 458 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsp"
                                  FunDec (fst _2, _1, _4, _7, snd _2) 
                   )
# 65 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 475 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsp"
                                  FunDec (fst _2, _1, [], _6, snd _2) 
                   )
# 67 "Parser.fsp"
                 : AbSyn.UntypedFunDec));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsp"
                                                       AbSyn.Int 
                   )
# 70 "Parser.fsp"
                 : AbSyn.Type));
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsp"
                                                       AbSyn.Char 
                   )
# 71 "Parser.fsp"
                 : AbSyn.Type));
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsp"
                                                       AbSyn.Bool 
                   )
# 72 "Parser.fsp"
                 : AbSyn.Type));
# 524 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsp"
                                                       AbSyn.Array _2 
                   )
# 73 "Parser.fsp"
                 : AbSyn.Type));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsp"
                                              Param (fst _2, _1) :: _4 
                   )
# 77 "Parser.fsp"
                 : 'gentype_Params));
# 551 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Type in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsp"
                                              Param (fst _2, _1) :: [] 
                   )
# 78 "Parser.fsp"
                 : 'gentype_Params));
# 563 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsp"
                                            Constant (IntVal (fst _1), snd _1) 
                   )
# 82 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsp"
                                            Constant (BoolVal (true), (_1)) 
                   )
# 83 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 585 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsp"
                                            Constant (BoolVal (false), (_1)) 
                   )
# 84 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> char * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsp"
                                            Constant (CharVal (fst _1), snd _1) 
                   )
# 85 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 607 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsp"
                                            Var _1 
                   )
# 86 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 618 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsp"
                                            StringLit _1 
                   )
# 87 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 629 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp list in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsp"
                                            ArrayLit (_2, (), _1) 
                   )
# 89 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 642 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsp"
                                            Plus (_1, _3, _2) 
                   )
# 90 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 655 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsp"
                                            And (_1, _3, _2) 
                   )
# 91 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 668 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsp"
                                            Not (_2, _1) 
                   )
# 92 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 680 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsp"
                                             Negate (_2, _1)
                   )
# 93 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 692 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsp"
                                            Or (_1, _3, _2) 
                   )
# 94 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsp"
                                            Minus(_1, _3, _2) 
                   )
# 95 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 718 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsp"
                                            Times(_1, _3, _2) 
                   )
# 96 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 731 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsp"
                                            Divide(_1, _3, _2) 
                   )
# 97 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 744 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsp"
                                            Equal(_1, _3, _2) 
                   )
# 98 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 757 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsp"
                                            Less (_1, _3, _2) 
                   )
# 99 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 770 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsp"
                                            If (_2, _4, _6, _1) 
                   )
# 101 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 786 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsp"
                                            Apply (fst _1, _3, snd _1) 
                   )
# 103 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsp"
                                            Apply (fst _1, [], snd _1) 
                   )
# 104 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 813 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.Type in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsp"
                                            Read (_3, _1) 
                   )
# 106 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsp"
                                            Write (_3, (), _1) 
                   )
# 108 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 841 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsp"
                                            Iota (_3, _1) 
                   )
# 110 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 855 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsp"
                                            Map (_3, _5, (), (), _1) 
                   )
# 112 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 871 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            let _8 = parseState.GetInput(8) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsp"
                                            Reduce (_3, _5, _7, (), _1) 
                   )
# 114 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 889 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.UntypedExp in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsp"
                                            _2 
                   )
# 115 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 902 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> UntypedExpFun in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsp"
                                            (_2 _4) 
                   )
# 118 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 916 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsp"
                                            Replicate (_3, _5, (), _1) 
                   )
# 121 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 932 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            let _8 = parseState.GetInput(8) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsp"
                                            Scan (_3, _5, _7, (), _1) 
                   )
# 124 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 950 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedFunArg in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> AbSyn.UntypedExp in
            let _6 = parseState.GetInput(6) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsp"
                                           Filter (_3, _5, (), _1)
                   )
# 127 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 966 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsp"
                                            Index (fst _1, _3, (), _2) 
                   )
# 130 "Parser.fsp"
                 : AbSyn.UntypedExp));
# 980 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsp"
                                             _1 :: _3 
                   )
# 133 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 993 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsp"
                                             _1 :: [] 
                   )
# 134 "Parser.fsp"
                 : AbSyn.UntypedExp list));
# 1004 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> UntypedExpFun in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> UntypedExpFun in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsp"
                                                function exp -> _1 (_3 exp)   
                   )
# 137 "Parser.fsp"
                 : UntypedExpFun));
# 1017 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> UntypedExpFun in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsp"
                                                _1
                   )
# 138 "Parser.fsp"
                 : UntypedExpFun));
# 1028 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsp"
                                      function exp -> (Let (Dec(fst(_1), _3, _2), exp ,_2))
                   )
# 141 "Parser.fsp"
                 : UntypedExpFun));
# 1041 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsp"
                                      FunName (fst _1 ) 
                   )
# 143 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 1052 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsp"
                                      Lambda (_2, [], _6, _1) 
                   )
# 145 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
# 1068 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> AbSyn.Type in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_Params in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> AbSyn.UntypedExp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsp"
                                      Lambda (_2, _4, _7, _1) 
                   )
# 147 "Parser.fsp"
                 : AbSyn.UntypedFunArg));
|]
# 1086 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 49;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.UntypedProg =
    engine lexer lexbuf 0 :?> _
